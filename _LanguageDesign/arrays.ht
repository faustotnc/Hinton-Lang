import "stdlib"

// Arrays support multiple datatypes by default.
let anArray = [1, 2, "Hello", 13.5, { firstName: "Jhon", lastName: "Doe" }]
print(anArray) // [1, 2, "Hello", 13.5, { firstName: "Jhon", lastName: "Doe" }]

// Arrays with a single type
let firstFivePrimes: Int[] = [2, 3, 5, 7, 11]
print(firstFivePrimes.length()) // 5


// ****** Array datatypes
// Why use the <Type1, Type2, ..., TypeN>[] format for array type definition?
// Arrays are ordered lists. By specifying a type, an array element can be any of the specified
// types, but not more than one at the same time. For example:
// let arr: <String, Int>[]; says that the elements of the array m can be of type String OR Int.
// Saying that the elements of the array can be of type String ADN Int at the same times does not
// make any sense, therefore, using the "<,>" format for array datatyping appropriate, and means that
// a single element of the array can be of any of the types specified. 
let single_type: String[] = ["fausto", "Genesis", "Martha", "Robert"] // this array can only contain string elements
const mixed_types: <String, Int>[] = ["age", 22] // This array can contain any number of strings or integers
let fixed_length_single_type: Int[3] = [2019, 2020, 2021] // this array can only contain three integer elements
const fixed_legth_mixed_types: <String, Int, Bool>[3] = ["Mary", 22, false] // this array can only contain 5 elements of types string, int, or boolean
let upperLimitArray: String[..3] = ["US", "China"] // this array can contain 3 or less elemnts (inclusive)
const lowerLimitArrays: Int[4..] = [2, 5, 7, 1, 7] // this array can contain 4 or more elemnts (inclusive)
let upperAndLowerLimitArrays: <Real, Int>[2..5] = [22, 22/2, 22/3, 22/4] // this array can contain 2 to 5 elements (inclusive)


// ***** Unlike in JavaScript, array elements can be accessed through negtive indeces (like in python)
// if the absolute value of the negative index is greater than the array's length, a NullPointerExeception will be thrown.
print(single_type[-2]) // "Martha"

// ***** Slicing arrays works the same way as python
let arrayToSlice = [1, 2, 3, 4, 5, 6];
let myNewArrayFromSlice = arrayToSlice[1,5] // [2, 3, 4, 5]
let myNewArrayFromSlice_Backwards = arrayToSlice[1,5,1] // [5, 4, 3, 2]


// ***** In general, arrays have the same
// ***** methods as JavaScript arrays, plus the
// ***** following other array methods:


// ***** Array mapping
let someEvenNumbers = firstFivePrimes.map(prime => prime - 1);
print(someEvenNumbers) // [1, 2, 4, 6, 10]


// ***** Array Filtering
let powersOfTwo = someEvenNumbers.filter(x => {
    for (n in 0..x) if (2 ** n == x) return true
    return false
});
print(powersOfTwo) // [1, 2, 4]


// ***** Arrays as function arguments
func someFunction(names: String[]): void {
    for (name in names) name.toUppercase();
    print(names)
}

// When passing an array as an argument to a function,
// the function receives a reference to the array.
let namesArray1 = ["jhon", "marie", "karla"]
someFunction(namesArray1) // ["JHON", "MARIE", "KARLA"]
print(namesArray1) // ["JHON", "MARIE", "KARLA"]

// To pass the array to the function without referencing the
// original array, a clone of the original array must be passed.
// Arrays can also be cloned using the rest operator.
let namesArray2 = ["Francis", "Hazel", "Tamiya", "Ron"]
someFunction(namesArray2.clone()) // ["FRANCIS", "HAZEL", "TAMIYA", "RON"]
print(namesArray2) // ["Francis", "Hazel", "Tamiya", "Ron"]
