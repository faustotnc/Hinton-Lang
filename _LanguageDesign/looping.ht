import { someLib } from 'stdlib'

// ***** For-In lops

// Basic
for (let n: Int in 0...10) {
    print(n) // 0\n 1\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n
}

// The range() function works the
// same way as in python.
for (let n: Real in range(10)) {
    print(n) // 0\n 1\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n
}

// Array Iterator
let groupMembers = ["Jhon", "Marie", "Karla"]
for (let member in groupMembers) {
    print(member)
}

// With specified typing
for (let member: String in groupMembers) {
    print(member)
}

// For-In loops also work on dictionaries
let someDict = {
    name: "Ivon",
    age: 34,
    gender: "male",
}
for (let key, value, index in someDict) {
    print(key, value, index) // "name Ivon 0"
                             // "age 34 1"
                             // "gender male 2"
}


// ***** Indexed for loop
for (let i = 0; i < groupMembers.length(); i++) {
    let member = groupMembers[i];
    print("Group Member #" + i.toString() + ": " + member)
}



// ***** While loop
let m = 0;
while (m < 20) {
    if (m % 2 == 0) print(m.toString() + " is an even number")
    m++;
}


// ***** Comprehensive Lists
// List comprehensions work the same way as in Python
let myNewList = [n ** 2 for n: Int in range(10)]


// ***** For-Await loops
// A for-Await loop retreives the yielded values of an
// asynchronous generator function in their order of declaration.

// Visit the functions.hint file for more
// information on generator functions.
async genr func myGenerator(): String {
    yield "First yielded value";
    yield "Second yielded value";
    yield "Third yielded value";
}

for await (let value: String in myGenerator()) {
    print(value)
}



// ***** Array.forEach(callback) loop
// Arrays come with a forEach function that is
// the same as JavaScript's implementation.
// The loop cannot be stopped unless a value is returned
// from the loop's callback. I.e., the keywords 'continue'
// and 'break' have no effect on the loop.
[1, "hello", 3, "world"].forEach((value, index) => {
    if (value is String) print(value)
})



// ***** The 'break' and 'continue' keywords
// The 'break' keyword is used inside a loop to
// stop the loop inmediatelly, and proceed to
// execute the rest of the code ouside the loop.

while (true) {
    print("Executed once.")

    break; // Breaks the loop

    print("The loop will iterate once, and\n")
    print("This code will never be reached")
}

// The 'continue' keyword stops the current iteration
// of the loop inmediatelly, and proceeds to the next
// iteration of the loop.

for (let i in range(groupMembers.length() - 1)) {
    let member = groupMembers[i];

    // Skips the iteration of the loop if
    // the current member is "Marie".
    if (member == "Marie") continue;

    print("Group Member #" + i.toString() + ": " + member)
}


// ***** Generic Loops
// Generic loops work the same way the "loop"
// statemet works in Rust.

loop {
    print("Hello World") // This will print forever.
}

let loopVar = 0;
loop {

    print("Hello World");

    if (loopVar == 10) {
        break; // The loop will break when loopVar equals 10
    } else {
        loopVar ++;
    }
}


let someLoopVar = 0;
let myLoopValue = loop {
    if (someLoopVar == 20) {
        // Inside a generic loop, we can break the
        // loop and return a value.
        break "The loop has ended";
    } else {
        someLoopVar ++;
    }
}

print(myLoopValue) // "The loop has ended"